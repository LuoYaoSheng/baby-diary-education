// ==========================================================================
// GFast自动生成dao操作代码，无需手动修改，重新生成不会自动覆盖.
// 生成日期：{{.table.CreateTime}}
// 生成路径: {{.table.PackageName}}/dao/{{.table.TableName}}.go
// 生成人：{{.table.FunctionAuthor}}
// ==========================================================================
////
package dao

import (
    comModel "gfast/app/common/model"
    "{{.table.PackageName}}/dao/internal"
    {{if gt (len .table.LinkedTables) 0}}
    "{{.table.PackageName}}/model"
    {{end}}
    {{if .table.HasTimeColumn}}
    "github.com/gogf/gf/os/gtime"
    {{end}}
)


// {{.table.BusinessName | CaseCamelLower}}Dao is the manager for logic model data accessing and custom defined data operations functions management.
// You can define custom methods on it to extend its functionality as you wish.
type {{.table.BusinessName | CaseCamelLower}}Dao struct {
	*internal.{{.table.BusinessName | CaseCamel}}Dao
}

var (
    // {{.table.ClassName}} is globally public accessible object for table tools_gen_table operations.
    {{.table.ClassName}} = {{.table.BusinessName | CaseCamelLower}}Dao{
        internal.New{{.table.ClassName}}Dao(),
    }
)

////
// Fill with you ideas below.
////


// {{.table.ClassName}}SearchReq 分页请求参数
type {{.table.ClassName}}SearchReq struct {
    {{range $index, $column := .table.QueryColumns}}
    {{$column.GoField}}  {{if or (eq $column.GoType "Time") (eq $column.GoType "int") (eq $column.GoType "int64") (eq $column.GoType "uint") (eq $column.GoType "uint64") (eq $column.GoType "float") (eq $column.GoType "float64") (eq $column.GoType "bool")}}{{if eq $column.QueryType "BETWEEN"}}[]{{end}}string{{else}}{{if eq $column.QueryType "BETWEEN"}}[]{{end}}{{$column.GoType}}{{end}} `p:"{{$column.HtmlField}}"{{if ne $column.FieldValidation ""}} v:"{{$column.FieldValidation}}"{{end}}` //{{$column.ColumnComment}}
    {{end}}
    comModel.PageReq
}


// {{.table.ClassName}}AddReq 添加操作请求参数
type {{.table.ClassName}}AddReq struct {
    {{if .table.IsPkInsertable}}
    {{.table.PkColumn.GoField}}    {{.table.PkColumn.GoType}}  `p:"{{.table.PkColumn.HtmlField}}" v:"required#主键ID不能为空"`
    {{end}}
    {{range $index, $column := .table.EditColumns}}
    {{$column.GoField}}  {{if eq $column.GoType "Time"}}*gtime.Time{{else if eq $column.HtmlType "images" "file" "files"}}[]*comModel.UpFile{{else}}{{$column.GoType}}{{end}}   `p:"{{$column.HtmlField}}" {{if $column.IsRequired}}v:"required#{{$column.ColumnComment}}不能为空"{{end}}`
    {{end}}
    {{if .table.HasCreatedBy}}
    CreatedBy       uint64
    {{end}}
}


// {{.table.ClassName}}EditReq 修改操作请求参数
type {{.table.ClassName}}EditReq struct {
    {{.table.PkColumn.GoField}}    {{.table.PkColumn.GoType}}  `p:"{{.table.PkColumn.HtmlField}}" v:"required#主键ID不能为空"`
    {{range $index, $column := .table.EditColumns}}
    {{$column.GoField}}  {{if eq $column.GoType "Time"}}*gtime.Time{{else if eq $column.HtmlType "images" "file" "files"}}[]*comModel.UpFile{{else}}{{$column.GoType}}{{end}} `p:"{{$column.HtmlField}}" {{if $column.IsRequired}}v:"required#{{$column.ColumnComment}}不能为空"{{end}}`
    {{end}}
    {{if .table.HasUpdatedBy}}
    UpdatedBy       uint64
    {{end}}
}


{{range $index,$column:= .table.Columns}}
{{if and $column.IsStatus $column.IsList}}
// {{$.table.ClassName}}{{$column.GoField}}Req 设置状态参数
type {{$.table.ClassName}}{{$column.GoField}}Req struct {
	{{$.table.PkColumn.GoField}}    {{$.table.PkColumn.GoType}}  `p:"{{$.table.PkColumn.HtmlField}}" v:"required#主键ID不能为空"`
	{{$column.GoField}} {{$column.GoType}}   `p:"{{$column.HtmlField}}" v:"required#{{$column.ColumnComment}}不能为空"`
}
{{end}}
{{end}}


// {{.table.ClassName}}ListRes 列表返回结果
type {{.table.ClassName}}ListRes struct {
  {{if eq .table.TplCategory "tree"}}
    {{range $index, $column := .table.Columns}}
      {{if or (eq $column.HtmlField $.table.TreeCode) (eq $column.HtmlField $.table.TreeParentCode) (eq $column.HtmlField $.table.TreeName) }}
    {{$column.GoField}}  {{if eq $column.GoType "Time"}}*gtime.Time{{else if eq $column.HtmlType "images" "file" "files"}}[]*comModel.UpFile{{else}}{{$column.GoType}}{{end}}   `json:"{{$column.HtmlField}}"`
      {{end}}
    {{end}}
    {{range $index, $column := .table.Columns}}
      {{if and $column.IsList (ne $column.HtmlField $.table.TreeCode) (ne $column.HtmlField $.table.TreeParentCode) (ne $column.HtmlField $.table.TreeName) }}
    {{$column.GoField}}  {{if eq $column.GoType "Time"}}*gtime.Time{{else if eq $column.HtmlType "images" "file" "files"}}[]*comModel.UpFile{{else}}{{$column.GoType}}{{end}}   `json:"{{$column.HtmlField}}"`
      {{end}}
    {{end}}
  {{else}}
    {{if not .table.IsPkListable }}
    {{.table.PkColumn.GoField}}    {{.table.PkColumn.GoType}}  `json:"{{.table.PkColumn.HtmlField}}"`
    {{end}}
    {{range $index, $column := .table.ListColumns}}
    {{$column.GoField}}  {{if eq $column.GoType "Time"}}*gtime.Time{{else if eq $column.HtmlType "images" "file" "files"}}[]*comModel.UpFile{{else}}{{$column.GoType}}{{end}}   `json:"{{$column.HtmlField}}"`
    {{end}}
  {{end}}
  {{range $ti, $linkedTable := .table.LinkedTables}}
    Linked{{$.table.ClassName}}{{$linkedTable.ClassName}}   *model.Linked{{$.table.ClassName}}{{$linkedTable.ClassName}}  `json:"linked{{$.table.ClassName}}{{$linkedTable.ClassName}}"`
  {{end}}
}

// {{.table.ClassName}}InfoRes 数据返回结果
type {{.table.ClassName}}InfoRes struct {
    {{range $index, $column := .table.Columns}}
    {{$column.GoField}}  {{if eq $column.GoType "Time"}}*gtime.Time{{else if eq $column.HtmlType "images" "file" "files"}}[]*comModel.UpFile{{else}}{{$column.GoType}}{{end}}   `json:"{{$column.HtmlField}}"`
    {{end}}
    {{range $ti, $linkedTable := .table.LinkedTables}}
    Linked{{$.table.ClassName}}{{$linkedTable.ClassName}}   *model.Linked{{$.table.ClassName}}{{$linkedTable.ClassName}}  `json:"linked{{$.table.ClassName}}{{$linkedTable.ClassName}}"`
    {{end}}
}

